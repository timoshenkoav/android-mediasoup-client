// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/mediasoup/droid/Device

#ifndef org_mediasoup_droid_Device_JNI
#define org_mediasoup_droid_Device_JNI

#include <jni.h>

#include "../include/jni_generator_helper.h"
#include <sdk/android/native_api/jni/scoped_java_ref.h>

// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_mediasoup_droid_Device[];
const char kClassPath_org_mediasoup_droid_Device[] = "org/mediasoup/droid/Device";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass> g_org_mediasoup_droid_Device_clazz(nullptr);
#ifndef org_mediasoup_droid_Device_clazz_defined
#define org_mediasoup_droid_Device_clazz_defined
inline jclass org_mediasoup_droid_Device_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_mediasoup_droid_Device,
      &g_org_mediasoup_droid_Device_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace mediasoupclient {

static jlong JNI_Device_NewDevice(JNIEnv* env);

JNI_GENERATOR_EXPORT jlong Java_org_mediasoup_droid_Device_nativeNewDevice(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_Device_NewDevice(env);
}

static void JNI_Device_FreeDevice(JNIEnv* env, jlong device);

JNI_GENERATOR_EXPORT void Java_org_mediasoup_droid_Device_nativeFreeDevice(
    JNIEnv* env,
    jclass jcaller,
    jlong device) {
  return JNI_Device_FreeDevice(env, device);
}

static void JNI_Device_Load(JNIEnv* env, jlong device, const webrtc::JavaParamRef<jstring>& routerRtpCapabilities);

JNI_GENERATOR_EXPORT void Java_org_mediasoup_droid_Device_nativeLoad(
    JNIEnv* env,
    jclass jcaller,
    jlong device,
    jstring routerRtpCapabilities) {
  return JNI_Device_Load(env, device, webrtc::JavaParamRef<jstring>(env,
      routerRtpCapabilities));
}

static jboolean JNI_Device_IsLoaded(JNIEnv* env, jlong device);

JNI_GENERATOR_EXPORT jboolean Java_org_mediasoup_droid_Device_nativeIsLoaded(
    JNIEnv* env,
    jclass jcaller,
    jlong device) {
  return JNI_Device_IsLoaded(env, device);
}

static webrtc::ScopedJavaLocalRef<jstring> JNI_Device_GetRtpCapabilities(JNIEnv* env, jlong
    device);

JNI_GENERATOR_EXPORT jstring Java_org_mediasoup_droid_Device_nativeGetRtpCapabilities(
    JNIEnv* env,
    jclass jcaller,
    jlong device) {
  return JNI_Device_GetRtpCapabilities(env, device).Release();
}

static jboolean JNI_Device_CanProduce(JNIEnv* env, jlong device,
    const webrtc::JavaParamRef<jstring>& kind);

JNI_GENERATOR_EXPORT jboolean Java_org_mediasoup_droid_Device_nativeCanProduce(
    JNIEnv* env,
    jclass jcaller,
    jlong device,
    jstring kind) {
  return JNI_Device_CanProduce(env, device, webrtc::JavaParamRef<jstring>(env, kind));
}

static webrtc::ScopedJavaLocalRef<jobject> JNI_Device_CreateSendTransport(JNIEnv* env, jlong
    device,
    const webrtc::JavaParamRef<jobject>& listener,
    const webrtc::JavaParamRef<jstring>& id,
    const webrtc::JavaParamRef<jstring>& iceParameters,
    const webrtc::JavaParamRef<jstring>& iceCandidates,
    const webrtc::JavaParamRef<jstring>& dtlsParameters,
    const webrtc::JavaParamRef<jobject>& configuration,
    jlong peerConnectionFactory,
    const webrtc::JavaParamRef<jstring>& appData);

JNI_GENERATOR_EXPORT jobject Java_org_mediasoup_droid_Device_nativeCreateSendTransport(
    JNIEnv* env,
    jclass jcaller,
    jlong device,
    jobject listener,
    jstring id,
    jstring iceParameters,
    jstring iceCandidates,
    jstring dtlsParameters,
    jobject configuration,
    jlong peerConnectionFactory,
    jstring appData) {
  return JNI_Device_CreateSendTransport(env, device, webrtc::JavaParamRef<jobject>(env,
      listener), webrtc::JavaParamRef<jstring>(env, id),
      webrtc::JavaParamRef<jstring>(env, iceParameters),
      webrtc::JavaParamRef<jstring>(env, iceCandidates),
      webrtc::JavaParamRef<jstring>(env, dtlsParameters),
      webrtc::JavaParamRef<jobject>(env, configuration), peerConnectionFactory,
      webrtc::JavaParamRef<jstring>(env, appData)).Release();
}

static webrtc::ScopedJavaLocalRef<jobject> JNI_Device_CreateRecvTransport(JNIEnv* env, jlong
    device,
    const webrtc::JavaParamRef<jobject>& listener,
    const webrtc::JavaParamRef<jstring>& id,
    const webrtc::JavaParamRef<jstring>& iceParameters,
    const webrtc::JavaParamRef<jstring>& iceCandidates,
    const webrtc::JavaParamRef<jstring>& dtlsParameters,
    const webrtc::JavaParamRef<jobject>& configuration,
    jlong peerConnectionFactory,
    const webrtc::JavaParamRef<jstring>& appData);

JNI_GENERATOR_EXPORT jobject Java_org_mediasoup_droid_Device_nativeCreateRecvTransport(
    JNIEnv* env,
    jclass jcaller,
    jlong device,
    jobject listener,
    jstring id,
    jstring iceParameters,
    jstring iceCandidates,
    jstring dtlsParameters,
    jobject configuration,
    jlong peerConnectionFactory,
    jstring appData) {
  return JNI_Device_CreateRecvTransport(env, device, webrtc::JavaParamRef<jobject>(env,
      listener), webrtc::JavaParamRef<jstring>(env, id),
      webrtc::JavaParamRef<jstring>(env, iceParameters),
      webrtc::JavaParamRef<jstring>(env, iceCandidates),
      webrtc::JavaParamRef<jstring>(env, dtlsParameters),
      webrtc::JavaParamRef<jobject>(env, configuration), peerConnectionFactory,
      webrtc::JavaParamRef<jstring>(env, appData)).Release();
}


}  // namespace mediasoupclient

#endif  // org_mediasoup_droid_Device_JNI
