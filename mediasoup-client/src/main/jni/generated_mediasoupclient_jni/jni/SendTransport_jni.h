// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/mediasoup/droid/SendTransport

#ifndef org_mediasoup_droid_SendTransport_JNI
#define org_mediasoup_droid_SendTransport_JNI

#include <jni.h>

#include "../include/jni_generator_helper.h"
#include <sdk/android/src/jni/scoped_java_ref_counted.h>

// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_mediasoup_droid_SendTransport[];
const char kClassPath_org_mediasoup_droid_SendTransport[] = "org/mediasoup/droid/SendTransport";

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_mediasoup_droid_SendTransport_00024Listener[];
const char kClassPath_org_mediasoup_droid_SendTransport_00024Listener[] =
    "org/mediasoup/droid/SendTransport$Listener";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass> g_org_mediasoup_droid_SendTransport_clazz(nullptr);
#ifndef org_mediasoup_droid_SendTransport_clazz_defined
#define org_mediasoup_droid_SendTransport_clazz_defined
inline jclass org_mediasoup_droid_SendTransport_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_mediasoup_droid_SendTransport,
      &g_org_mediasoup_droid_SendTransport_clazz);
}
#endif
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_mediasoup_droid_SendTransport_00024Listener_clazz(nullptr);
#ifndef org_mediasoup_droid_SendTransport_00024Listener_clazz_defined
#define org_mediasoup_droid_SendTransport_00024Listener_clazz_defined
inline jclass org_mediasoup_droid_SendTransport_00024Listener_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_mediasoup_droid_SendTransport_00024Listener,
      &g_org_mediasoup_droid_SendTransport_00024Listener_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace mediasoupclient {

static jlong JNI_SendTransport_GetNativeTransport(JNIEnv* env, jlong transport);
static void JNI_SendTransport_removeTrack(JNIEnv* env, jlong transport, jlong track);

JNI_GENERATOR_EXPORT jlong Java_org_mediasoup_droid_SendTransport_nativeGetNativeTransport(
    JNIEnv* env,
    jclass jcaller,
    jlong transport) {
  return JNI_SendTransport_GetNativeTransport(env, transport);
}

static webrtc::ScopedJavaLocalRef<jobject> JNI_SendTransport_Produce(JNIEnv* env, jlong
    transport,
    const webrtc::JavaParamRef<jobject>& listener,
    jlong track,
    const webrtc::JavaParamRef<jobjectArray>& encodings,
    const webrtc::JavaParamRef<jstring>& codecOptions,
    const webrtc::JavaParamRef<jstring>& appData);

JNI_GENERATOR_EXPORT jobject Java_org_mediasoup_droid_SendTransport_nativeProduce(
    JNIEnv* env,
    jclass jcaller,
    jlong transport,
    jobject listener,
    jlong track,
    jobjectArray encodings,
    jstring codecOptions,
    jstring appData) {
  return JNI_SendTransport_Produce(env, transport, webrtc::JavaParamRef<jobject>(env,
      listener), track, webrtc::JavaParamRef<jobjectArray>(env, encodings),
      webrtc::JavaParamRef<jstring>(env, codecOptions),
      webrtc::JavaParamRef<jstring>(env, appData)).Release();
}

static void JNI_SendTransport_FreeTransport(JNIEnv* env, jlong transport);
static void JNI_SendTransport_CloseTransport(JNIEnv* env, jlong transport);

JNI_GENERATOR_EXPORT void Java_org_mediasoup_droid_SendTransport_nativeFreeTransport(
    JNIEnv* env,
    jclass jcaller,
    jlong transport) {
  return JNI_SendTransport_FreeTransport(env, transport);
}

JNI_GENERATOR_EXPORT void Java_org_mediasoup_droid_SendTransport_nativeCloseTransport(
    JNIEnv* env,
    jclass jcaller,
    jlong transport) {
    return JNI_SendTransport_CloseTransport(env, transport);
}


static std::atomic<jmethodID> g_org_mediasoup_droid_SendTransport_00024Listener_onProduce(nullptr);
static webrtc::ScopedJavaLocalRef<jstring> Java_Listener_onProduce(JNIEnv* env, const
    webrtc::JavaRef<jobject>& obj, const webrtc::JavaRef<jobject>& transport,
    const webrtc::JavaRef<jstring>& kind,
    const webrtc::JavaRef<jstring>& rtpParameters,
    const webrtc::JavaRef<jstring>& appData) {
  jclass clazz = org_mediasoup_droid_SendTransport_00024Listener_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_mediasoup_droid_SendTransport_00024Listener_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onProduce",
"(Lorg/mediasoup/droid/Transport;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
          &g_org_mediasoup_droid_SendTransport_00024Listener_onProduce);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id, transport.obj(), kind.obj(), rtpParameters.obj(),
              appData.obj()));
  return webrtc::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID>
    g_org_mediasoup_droid_SendTransport_00024Listener_onProduceData(nullptr);
static webrtc::ScopedJavaLocalRef<jstring> Java_Listener_onProduceData(JNIEnv* env, const
    webrtc::JavaRef<jobject>& obj, const webrtc::JavaRef<jobject>& transport,
    const webrtc::JavaRef<jstring>& label,
    const webrtc::JavaRef<jstring>& protocol,
    const webrtc::JavaRef<jstring>& rtpParameters,
    const webrtc::JavaRef<jstring>& appData) {
  jclass clazz = org_mediasoup_droid_SendTransport_00024Listener_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_mediasoup_droid_SendTransport_00024Listener_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onProduceData",
"(Lorg/mediasoup/droid/Transport;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
          &g_org_mediasoup_droid_SendTransport_00024Listener_onProduceData);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id, transport.obj(), label.obj(), protocol.obj(),
              rtpParameters.obj(), appData.obj()));
  return webrtc::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID> g_org_mediasoup_droid_SendTransport_Constructor(nullptr);
static webrtc::ScopedJavaLocalRef<jobject> Java_SendTransport_Constructor(JNIEnv* env, jlong
    nativeTransport) {
  jclass clazz = org_mediasoup_droid_SendTransport_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_mediasoup_droid_SendTransport_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "<init>",
          "(J)V",
          &g_org_mediasoup_droid_SendTransport_Constructor);

  jobject ret =
      env->NewObject(clazz,
          call_context.base.method_id, nativeTransport);
  return webrtc::ScopedJavaLocalRef<jobject>(env, ret);
}

}  // namespace mediasoupclient

#endif  // org_mediasoup_droid_SendTransport_JNI
